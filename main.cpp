#define PROGRAM_FILE "qr_method"
#define KERNEL_FUNC "qr_method"
#define SUCCESS 1
#define TAM 47
#define COL 36
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>

#include <math.h>
#include <string.h>

#include "CL/opencl.h"
#include "AOCLUtils/aocl_utils.h"

using namespace aocl_utils;

extern "C"
{
   bool init_opencl_data_structure_dense_(int *n, bool *success);
   void init_structure_single_dense (int *n, double matrix[]);
   void run_single_dense(int *n);
   void cleanupopencl_();
}

/**
* Common Variables
*/
char dname[500]; //name of the platform
double *q_ptr = NULL, *r_ptr = NULL;

/**
* OpenCL common variables
*/
unsigned num_devices = 0;
cl_platform_id platform = NULL;
scoped_array<cl_device_id> device;
cl_context context = NULL;
cl_kernel kernel;
cl_command_queue queue;
cl_program program = NULL;
cl_event computation_event, send_event, receive_event;
cl_mem input_q_buf, input_r_buf;

void print_matrix(double *matrix){
    for (int i = 0; i < TAM; i++){
        for (int j = 0; j < TAM; j++) {
            printf("%lf\t", matrix[i*TAM + j]);
        }
        printf("\n");
    }
}

void print_vector(double *vector){
    for (int i = 0; i < TAM; i++){
        printf("%lf\t", vector[i]);
    }
}

void mult_mat_dense(double *dataQ, double *dataR, double *result){
    int i, j, k;
    double sum;

    for(i = 0;i < TAM;i++){
        for(j = 0;j < TAM;j++){
            for(k = 0; k < TAM;k++){
                sum += dataQ[i*TAM + k] * dataR[k * TAM + j];
            }
            result[i *TAM + j] = sum;
            sum = 0;
        }
    }
}

/** Init OpenCL related variables and data structures for QR method
* success, receives TRUE if all of them could be allocated, otherwise, receives FALSE
* return TRUE, if all of them could be allocated,
* return FALSE, if any of the variables could not be allocated
*/
bool init_opencl_data_structure_dense_(int *n, bool *success){
    cl_int status;
    int ARRAY_SIZE = *n;

    if(!setCwdToExeDir()) {
        *success = false;
        return false;
    }

    platform = findPlatform("Intel(R) FPGA SDK for OpenCL(TM)");
    if(platform == NULL) {
        printf("ERROR: Unable to find Intel(R) FPGA OpenCL platform.\n");
        *success = false;
        return false;
    }

    device.reset(getDevices(platform, CL_DEVICE_TYPE_ALL, &num_devices));

    context = clCreateContext(NULL, num_devices, device, &oclContextCallback, NULL, &status);
    checkError(status, "Failed to create context");

    std::string binary_file = getBoardBinaryFile(PROGRAM_FILE, device[0]);
    program = createProgramFromBinary(context, binary_file.c_str(), device, num_devices);

    status = clBuildProgram(program, 0, NULL, "", NULL, NULL);
    checkError(status, "Failed to build program");

    queue = clCreateCommandQueue(context, device[0], CL_QUEUE_PROFILING_ENABLE, &status);
    checkError(status, "Failed to create command queue");

    kernel = clCreateKernel(program, KERNEL_FUNC, &status);
    checkError(status, "Failed to create kernel");

    input_q_buf = clCreateBuffer(context, CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR, ARRAY_SIZE*ARRAY_SIZE * sizeof (double), NULL, &status);
    checkError(status, "Failed to create buffer for input Q");

    input_r_buf = clCreateBuffer(context, CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR, ARRAY_SIZE*ARRAY_SIZE * sizeof (double), NULL, &status);
    checkError(status, "Failed to create buffer for input R");

    *success = true;
    return true;
}

/** Init main variables of the sparse problem used on OpenCL
* N, the matrix size
* Q, this matrix copies the data from the initial matrix
* R, this matrix is set to zero
*/
void init_structure_single_dense (int *n, double matrix[]){
  int ARRAY_SIZE = *n;
  if(num_devices == 0) {
    checkError(-1, "No devices");
  }

  memcpy(q_ptr, matrix, ARRAY_SIZE*ARRAY_SIZE * sizeof(double));
}

/** Executes dense QR method on FPGA through OpenCL,
* It uses a single thread to explore pipeline parallelism,
* N, the matrix size
*/
void run_single_dense(int *n) {
  cl_int status;
  int ARRAY_SIZE = *n;
  const size_t global_work_size[1] = {1};

  status = clSetKernelArg(kernel, 0, sizeof input_q_buf, &input_q_buf);
  checkError(status, "Failed to set argument %d", 1);
  status = clSetKernelArg(kernel, 1, sizeof input_r_buf, &input_r_buf);
  checkError(status, "Failed to set argument %d", 2);

  struct timeval before, after;
  gettimeofday(&before, NULL);
  status = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, global_work_size, NULL, 0, NULL, &computation_event);
  clWaitForEvents(1, &computation_event);
  clReleaseEvent(computation_event);
  gettimeofday(&after, NULL);
  printf("Solve: %ld\n", ((after.tv_sec * 1000000 + after.tv_usec) - (before.tv_sec * 1000000 + before.tv_usec)));
  checkError(status, "Failed to launch kernel");
}


/** QR decomposition in dense format in FPGA
* N, the matrix size
* matrix, this matrix contains the chemical reactivity
*/
int solver_spjacobi_fpga_(int *n, double matrix[]){
  cl_int status;
  int ARRAY_SIZE = *n;
  int i;

  struct timeval before, after;

  gettimeofday(&before, NULL);
  q_ptr   = (double *) clEnqueueMapBuffer(queue, input_q_buf, CL_FALSE, CL_MAP_WRITE, 0, ARRAY_SIZE * ARRAY_SIZE * sizeof(double), 0, NULL, NULL, &status);
  checkError(status, "Failed to map write buffer q_ptr");
  r_ptr   = (double *) clEnqueueMapBuffer(queue, input_r_buf, CL_FALSE, CL_MAP_WRITE, 0, ARRAY_SIZE * ARRAY_SIZE * sizeof(double), 0, NULL, NULL, &status);
  checkError(status, "Failed to map write buffer r_ptr");

  init_structure_single_dense (n, matrix);

  clEnqueueUnmapMemObject(queue, input_q_buf, q_ptr, 0, NULL, NULL);
  clEnqueueUnmapMemObject(queue, input_r_buf, r_ptr, 0, NULL, NULL);
  clWaitForEvents(1, &send_event);
  clReleaseEvent(send_event);
  gettimeofday(&after, NULL);
  printf("Send: %ld\n", ((after.tv_sec * 1000000 + after.tv_usec) - (before.tv_sec * 1000000 + before.tv_usec)));

  run_single_dense(n);

  gettimeofday(&before, NULL);
  q_ptr   = (double *) clEnqueueMapBuffer(queue, input_q_buf, CL_FALSE, CL_MAP_READ, 0, ARRAY_SIZE * ARRAY_SIZE * sizeof(double), 0, NULL, NULL, &status);
  checkError(status, "Failed to map write buffer q_ptr");
  r_ptr   = (double *) clEnqueueMapBuffer(queue, input_r_buf, CL_FALSE, CL_MAP_READ, 0, ARRAY_SIZE * ARRAY_SIZE * sizeof(double), 0, NULL, NULL, &status);
  checkError(status, "Failed to map write buffer r_ptr");
  clWaitForEvents(1, &receive_event);
  clReleaseEvent(receive_event);
  printf("\n\nMatriz Q\n");
  print_matrix(q_ptr);
  printf("\n\nMatriz R\n");
  print_matrix(r_ptr);
  return SUCCESS;
}


/** Releases all OpenCL structures
*/
void cleanupopencl_() {
  if(kernel) {
     clReleaseKernel(kernel);
  }
  if(queue) {
     clReleaseCommandQueue(queue);
  }
  if(input_q_buf) {
     clReleaseMemObject(input_q_buf);
  }
  if (input_r_buf){
     clReleaseMemObject(input_r_buf);
  }
  if(program) {
    clReleaseProgram(program);
  }
  if(context) {
    clReleaseContext(context);
  }
}

void mult_mat_vector_transpose_dense_(double *dataQT, double *dataB, double *result){
    int i, j, k;
    double sum;

    for(i = 0;i < TAM;i++){
        sum = 0;
        for(k = 0; k < TAM;k++){
            sum += dataQT[k*TAM + i] * dataB[k]; //Q is transposed
        }
        result[i] = sum;
    }
}

void backward_substitution_dense(double *dataR, double *dataX, double *dataY){
    int i, j;
    dataX[TAM-1] = dataY[TAM-1]/dataR[(TAM-1)*TAM + (TAM-1)];

    for (i = (TAM-2); i >= 0; i--)
    {
        dataX[i] = dataY[i];
        for (j = i+1; j < TAM; j++)
        {
            dataX[i] -= dataR[j*TAM + i] * dataX[j];
        };
        dataX[i] = dataX[i] / dataR[i*TAM + i];
    };
}

void qr_method_original_dense_(int *n, double *dataQ, double *dataR){
    int j, k, m;
    double sum = 0;

    for (k = 0; k < TAM; k++){
        sum = 0;
        for (m = 0; m < TAM; m++){
            sum += dataQ[m*TAM + k] * dataQ[m*TAM + k];
        }
        dataR[k*TAM + k] = sqrt(sum);

        for (m = 0; m < TAM; m++) {
            dataQ[m*TAM + k] = dataQ[m*TAM + k]/dataR[k*TAM + k];
        }

        for (j = k+1; j < TAM; j++){
            sum = 0;
            for (m = 0; m < TAM; m++){
                sum += dataQ[m*TAM + j] * dataQ[m*TAM + k];
            }
            dataR[k*TAM + j] = sum;

            sum = 0;
            for (m = 0; m < TAM; m++){
                dataQ[m*TAM + j] = dataQ[m*TAM + j] - (dataR[k*TAM + j] * dataQ[m*TAM + k]);
            }
        }
    }
}

void qr_method_article_dense_(int *n, double *dataQ, double *dataR){
    int j, k, m;
    double sum = 0;
    double r2[TAM];
    double rn[TAM*TAM];
    memset(r2, 0, sizeof(r2));
    memset(rn, 0, sizeof(rn));

    for (k = 0; k < TAM; k++) {
        sum = 0;
        for (m = 0; m < TAM; m++) {
            sum += dataQ[m * TAM + k] * dataQ[m * TAM + k];
        }

        r2[k] = sum;

        for (j = k + 1; j < TAM; j++) {
            sum = 0;
            for (m = 0; m < TAM; m++) {
                sum += dataQ[m * TAM + k] * dataQ[m * TAM + j];
            }
            rn[k * TAM + j] = sum;
        }

        for (j = k + 1; j < TAM; j++) {
            for (m = 0; m < TAM; m++) {
                dataQ[m * TAM + j] = dataQ[m * TAM + j] - ((rn[k * TAM + j] / r2[k]) * dataQ[m * TAM + k]);
            }
        }
    }

    for (k = 0; k < TAM; k++) {
        dataR[k*TAM + k] = sqrt(r2[k]);

        for (j = k + 1; j < TAM; j++) {
            dataR[k * TAM + j] = rn[k * TAM + j] / dataR[k * TAM + k];
        }

        for (m = 0; m < TAM; m++) {
            dataQ[m*TAM + k] = dataQ[m*TAM + k]/dataR[k*TAM + k];
        }
    }
}

int main() {
    double dataA[TAM*TAM] =
            {0.008356, -0.000000, 0.000020, -0.000020, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000001, -0.000000, -0.000001, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             0.007629, -0.000000, 0.015962, -0.007629, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000,
             0.000013, -0.000000, -0.000000, 0.008346, -0.000013, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, 0.032613, -0.046712, 0.155322, -0.018533, -0.000000, -0.000073, -0.000000, -0.000000, -0.000000, -0.000030, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000026, -0.000000, -0.000000, -0.000000, 0.000138, 0.095613, 0.000000, 0.000023, 0.000045, -0.000000, -0.087712, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, -0.000047, -0.095742, -0.000001,
             -0.000000, -0.000000, -0.000000, -0.023654, -0.023654, 0.031988, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.048183, -0.000000, -0.000000, -0.000000, -0.000000, 0.056517, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.048183, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -77436.298921, -0.000000, -0.138916, 0.162288, -0.023372, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.065714, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 77443.051476, -0.000000, -0.131427, -1.839983, -0.000000, -0.000000, -0.000000, -6.036983, 6.571366, -0.000000, -0.328568, -0.000000, -0.000000, -0.871035, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.985705,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -719149154.597408, 840256257.842559, -242214206.473636, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             0.029333, 0.000000, 0.006097, 0.171589, -0.000533, -0.000000, -0.006097, -0.171276, 0.000000, 0.000000, -0.000000, 0.124019, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 14.142115, -1.261046, 0.229139, 0.001837, 0.716671, 0.167367, 11.272654, 0.007067, 0.443049, 0.299556, -0.005173, 0.015943, 0.000000, 0.000220, 0.000000, 0.000000, -0.006292, -0.000000, -0.229139, -0.631153, -0.171600, -11.272654, -0.000020, -0.006640, -0.000000, -0.393519, -0.000000, -0.003725,
             0.000905, -0.000000, 0.010573, 0.010287, 0.000000, -0.000000, -0.000000, -0.000000, -0.020860, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.011478, 0.040672, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             0.000002, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000001, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000001, -0.000000, -0.000000, -0.000000, -0.000000, 0.008335, -0.000000, -0.000000, -0.000001, -0.000001, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             0.000005, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000002, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000001, -0.000002, -0.000000, -0.000000, -0.000000, -0.000002, 0.008339, -0.000000, -0.000005, -0.000000, -0.000000, -0.000002, -0.000000, -0.000000, -0.000000, -0.000000, -0.000001, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000001, -0.000000, -0.000001,
             -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             0.000000, -0.000000, -0.000000, -0.000215, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008549, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000215, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.008333, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, 0.009451, -0.009451, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.009451, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.009451, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.017785, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000,
             -0.000000, -0.000000, 0.005308, -0.004859, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.003942, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000159, -0.001759, -0.002895, -0.000181, -0.000449, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000479, 0.013207, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000690,
             -0.000000, -0.000000, 0.008437, -0.008437, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.008437, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.011801, -0.003554, -0.000440, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.016770, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, 0.004870, -0.004125, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.004125, -0.000000, -0.000000, -0.000000, -0.001842, -0.000000, -0.000000, -0.002951, -0.000000, -0.000000, -0.002214, -0.000745, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.013203, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, -0.000000, 0.288037, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.030734, -0.000000, -0.000000, -0.000000, -0.000000, -0.288037, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.296370, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000,
             12.694951, -0.000000, -0.000000, 0.518466, -0.000000, -0.000000, -0.518466, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -12.694951, -57.897810, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -71.111227, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 2908.112258, -2836.992698, -0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, 0.004870, -0.004632, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.004632, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.010080, -0.000238, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.013203, 0.000000, -0.000000, -0.000000,
             -0.000000, -0.000000, 0.014853, 0.113279, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.001832, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000869, -0.001094, -0.000000, -0.001288, -0.000000, -0.128132, -0.000000, -0.000000, -0.000000, -0.000000, -0.011605, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, 0.149903, 0.000000, -0.000381,
             -0.000000, -0.000000, 0.004870, -0.008844, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000896, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.001140, -0.004927, -0.001844, -0.000000, -0.000896, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.013203, -0.000000,
             -0.000000, -0.000000, 0.004870, -0.004870, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.013203
            };

    int i = 0, size = TAM;
    bool success = false;
    double dataB[TAM] = {7,4,0,3,6,9,0,3,3,8,0,8,0,1,4,6,7,9,2,4,6,9,8,7,3,4,7,4,1,7,1,3,1,1,2,4,0,6,5,1,9,4,1,9,2,9,9};//{1, 1, 1};
    double *dataValuesQ = (double*) malloc(TAM*COL*sizeof(double));
    int *dataColumnsQ = (int*) malloc(TAM*COL*sizeof(int));
    double *dataValuesR = (double*) malloc(TAM*COL*sizeof(double));
    int *dataColumnsR = (int*) malloc(TAM*COL*sizeof(int));
    double *dataR = (double*) malloc(TAM*TAM*sizeof(double));
    double *dataQ = (double*) malloc(TAM*TAM*sizeof(double));
    double *result = (double*) malloc(TAM*TAM*sizeof(double));
    double *dataX = (double*) malloc(TAM*sizeof(double));
    double *dataY = (double*) malloc(TAM*sizeof(double));

    memcpy(dataQ, dataA, sizeof(dataA));
    memset(dataQ, 0, sizeof(dataR));
    memset(dataR, 0, sizeof(dataR));
    memset(dataY, 0, sizeof(dataY));
    memset(dataX, 0, sizeof(dataX));
    memset(result, 0, sizeof(result));

    init_opencl_data_structure_dense_(&size, &success);

    for (i = 0; i < 1; i++) {
        solver_spjacobi_fpga_(&size, dataA);
//        memcpy(dataQ, dataA, sizeof(dataA));
//        qr_method_article_dense_(&i, dataQ, dataR);
//        mult_mat_vector_transpose_dense_(dataQ, dataB, dataY);
//        backward_substitution_dense(dataR, dataX, dataY);
    }

    printf("\n\nMatriz A\n");
    print_matrix(dataA);
    printf("\n\nMatriz Q\n");
    print_matrix(dataQ);
    printf("\n\nMatriz R\n");
    print_matrix(dataR);
    printf("\n\nResultado Q*R\n");

    mult_mat_dense(dataQ, dataR, result);
    print_matrix(result);
    printf("\n\nResultado Ax=b\n");
    print_vector(dataX);

    free(dataValuesQ);
    free(dataColumnsQ);
    free(dataValuesR);
    free(dataColumnsR);
    free(dataQ);
    free(dataR);
    free(result);
    free(dataX);
    free(dataY);
    cleanupopencl_();

    return 0;
}